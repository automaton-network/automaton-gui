name: C/C++ CI

on:
  push:
    paths:
      - 'PlaygroundGUI/**'
      - '.github/workflows/ccpp.yml'
  pull_request:
    paths:
      - 'PlaygroundGUI/**'
      - '.github/workflows/ccpp.yml'

jobs:
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [Win32, x64]
    env:
      build_dir: ./build
      dist_dir: ./build/local_third_party
      automaton_version: v0.1.11
    steps:
    - uses: actions/checkout@v2
    - name: Install build dependencies
      run: choco install unzip
    - name: prepare
      run: |        
        mkdir ${{ env.build_dir }}
        mkdir ${{ env.dist_dir }}
    - name: Fetch dependencies
      working-directory: ${{ env.dist_dir }}
      run: |
        curl -L -O https://github.com/automaton-network/automaton/releases/download/${{ env.automaton_version }}/automaton-Windows-${{ matrix.configuration }}-${{ matrix.platform }}-${{ env.automaton_version }}.zip
        unzip automaton-Windows-${{ matrix.configuration }}-${{ matrix.platform }}-${{ env.automaton_version }}.zip
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.0    
    - name: configure
      working-directory: ${{ env.build_dir }}
      run: cmake ../PlaygroundGUI -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -A ${{ matrix.platform }} -Dautomaton_PATH=./local_third_party
      shell: cmd
    - name: build
      working-directory: ${{ env.build_dir }}
      run: msbuild automaton-playground.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}
      shell: cmd
  ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
    env:
      build_dir: ./build
      dist_dir: ./build/local_third_party
      automaton_version: v0.1.11
    steps:
    - uses: actions/checkout@v2
    - name: prepare
      run: mkdir -p ${{ env.dist_dir }}
    - name: Fetch dependencies
      working-directory: ${{ env.dist_dir }}
      run: |
        sudo apt install libfreetype6-dev libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev
        curl -L -O https://github.com/automaton-network/automaton/releases/download/${{ env.automaton_version }}/automaton-Linux-${{ matrix.configuration }}-${{ env.automaton_version }}.zip
        unzip automaton-Linux-${{ matrix.configuration}}-${{ env.automaton_version }}.zip
    - name: configure
      working-directory: ${{ env.build_dir }}
      run: cmake ../PlaygroundGUI -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -Dautomaton_PATH=./local_third_party
    - name: build
      working-directory: ${{ env.build_dir }}
      run: make
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
    env:
      build_dir: ./build
      dist_dir: ./build/local_third_party
      automaton_version: v0.1.11
    steps:
    - uses: actions/checkout@v2
    - name: prepare
      run: mkdir -p ${{ env.dist_dir }}
    - name: Fetch dependencies
      working-directory: ${{ env.dist_dir }}
      run: |
        curl -L -O https://github.com/automaton-network/automaton/releases/download/${{ env.automaton_version }}/automaton-macOS-${{ matrix.configuration }}-${{ env.automaton_version }}.zip
        unzip automaton-macOS-${{ matrix.configuration}}-${{ env.automaton_version }}.zip
    - name: configure
      working-directory: ${{ env.build_dir }}
      run: cmake ../PlaygroundGUI -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -Dautomaton_PATH=./local_third_party
    - name: build
      working-directory: ${{ env.build_dir }}
      run: make
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run lint checks
        run: ./lint.sh
